# snippet     vio
# abbr        vim.o.|
# options     head
# 	vim.o.${0}
#
# snippet     vic
# abbr        vim.api.nvim_command(|)
# options     head
# 	vim.api.nvim_command(${0})
#
# snippet     init_module
# abbr        local M = {} ... return M
# options     head
# 	local M = {}
#
# 	${0}
#
# 	return M

# snippet     map
# abbr        vimp.?map({'override'}, ...)
# options     head
# 	vimp.${1}noremap({'override'}, ${0})
#
# snippet     plug
# abbr        pcall(require, ...)
# options     head
# 	local ok, ${1} = pcall(require, '$1')
# 	if not ok then do return end end
#
# 	${0}

snippet     lam
abbr        function(${1}) ... end
	function(${1})
		${0}
	end

snippet     for
abbr        for i = n, end do ... end
	for ${1:i} = ${2:1}, ${3:end} do
		${0}
	end

snippet     foreach
abbr        for i, v in ipairs({$1}) do ...
	for ${1:_}, ${2:v} in ipairs(${3}) do
		${0}
	end

# snippet     ncmd
# abbr        vim.api.nvim_command(...)
# 	vim.api.nvim_command(${0})
#
#
# snippet     ncall
# abbr        vim.api.nvim_call_function(...)
# 	vim.api.nvim_command(${0})
#
# snippet     echo
# abbr        print(vim.inspect(|))
# 	print(vim.inspect(${0}))


snippet     lfunc
abbr        local funciton(...)
alias       localfunction,localfunc
	local ${1:func} = function(${2:#:args})
		${0}
	end


snippet     function
abbr        funciton name(...)
alias       func
	function ${1:#:name}(${2:#:args})
		${0}
	end

snippet     else
abbr        else ...
options     head
	else
		${0}

snippet     splitlines
abbr        for line in s:gmatch("[^\r\n]+") do ...
	for line in ${1:#:text}:gmatch("[^\r\n]+") do
		${0}
	end

snippet     a
abbr        vim.api.
	vim.api.

snippet     require
abbr        require '...'
alias		req
	require'${0}'

snippet     elseif
abbr        elseif ... then
options     head
	elseif ${0} then


snippet     feedkey
abbr        nvim_feedkeys()
	a.nvim_feedkeys(a.nvim_replace_termcodes("${1:key}", true, false, true), 'n', true)

snippet     while
abbr        while ... do
	while ${1:cond} do
		${0}
	end

snippet     log
abbr        log.xxx~
options     head
	local _ = log.${1}() and log.$1(${0})

snippet     do
abbr        do~
options     head
	do
		${0}
	end

snippet     fmt
abbr        fmt~
	string.format('${0}', )
